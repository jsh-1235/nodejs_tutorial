#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tutorial:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//==============================================================================
// Socket.io
//==============================================================================
var io = require('socket.io').listen(server);

var database = require('../public/javascripts/database');

var security = require('../public/javascripts/security.js')

var dataLogger = require('../public/javascripts/dataLogger');

//==============================================================================
let problems = [];

global.problems = problems;

var count = 0;

let certifications = [];

global.certifications = certifications;

function manageList(socket) {
  socket.on('add', function (data) {

    var value = Number(data['option'])

    problems.push(count++);

    io.sockets.emit('update', problems);

    console.log("add : " + problems)
    console.log("option : " + value)
  });

  socket.on('clear', function (data) {
    count = 0;
    problems = [];

    io.sockets.emit('update', problems);

    console.log("clear : " + problems)
  });

  socket.on('remove', function (data) {
    var id = Number(data.id);

    var index = problems.indexOf(id);

    console.log(id + " " + index)

    problems.splice(index, 1);

    io.sockets.emit('update', problems);

    console.log("remove : " + problems)
  });

  socket.on('refresh', function (data) {
    io.sockets.emit('update', problems);
  });
}

//==============================================================================
function manageDatabase(socket) {
  socket.on('select', function (data) {
   //console.log("select : " + data.length)

    database.select().then(function (records) {
      certifications = [];

      certifications = records;

      console.log("certifications : " + certifications.length)

      for(var i = 0; i < certifications.length; i++){      
        console.log(certifications[i].id + " " + certifications[i].serialNumber)
      }

      io.sockets.emit('updateDB', records);
    }).catch((error) => setImmediate(() => {
      console.log(error);
    }));
  });

  socket.on('insert', function (data) {
    database.insert(data.length).then(function (row) {
      database.select().then(function (records) {
        console.log("row : " + row);

        io.sockets.emit('update', records);
      }).catch((error) => setImmediate(() => {
        console.log(error);;
      }));
    }).catch((error) => setImmediate(() => {
      console.log(error);
    }));
  });

  socket.on('clear', function (data) {
    database.clear().then(function (result) {
      database.select().then(function (records) {
        console.log("clear : " + result);

        io.sockets.emit('update', records);
      }).catch((error) => setImmediate(() => {
        console.log(error);
      }));
    }).catch((error) => setImmediate(() => {
      console.log(error);
    }));
  });

  socket.on('delete', function (data) {
    database.delete(data).then(function (result) {
      database.select().then(function (records) {
        console.log("delete : " + data);

        io.sockets.emit('update', records);
      }).catch((error) => setImmediate(() => {
        console.log(error);
      }));
    }).catch((error) => setImmediate(() => {
      console.log(error);
    }));
  });

  socket.on('register', function (data) {
    var id = -1;

    var serialNumber = security.decrypt(data.licenseKey);

    for (var i = 0; i < database.Table.length; i++) {
      if (database.Table[i].serialNumber == serialNumber) {

        id = i;

        console.log(id);

        break;
      }
    }

    if (id != -1) {

      var today = new Date();

      database.Table()[id].date = today.toLocaleString();

      if (data.state) {
        if (database.Table()[id].mac == "") {
          database.Table()[id].state = 'Register';

          database.Table()[id].mac = data.mac;
        } else {
          io.sockets.emit('error', {
            'title': data.serialNumber,
            'content': "Already registered."
          });
        }
      } else {
        if (database.Table()[id].mac != "") {
          if (data.mac == security.decrypt(database.Table()[id].mac)) {
            database.Table()[id].state = 'Unregister';

            database.Table()[id].mac = "";
          } else {
            console.log('MAC address values do not match.');
          }
        } else {
          io.sockets.emit('error', {
            'title': data.serialNumber,
            'content': "Already unregistered."
          });
        }
      }

      io.sockets.emit('update', database.Table());

      io.sockets.emit('register', {
        'id': id,
        'state': data.state,
        'mac': data.mac
      });
    }
  });

  //socket.on('statistics', function (data) {
  //    var register = database.register();

  //    io.sockets.emit('statistics', {
  //        'total': database.Table().length,
  //        'register': register
  //    });    
  //});      
}

io.sockets.on('connection', function (socket) {
  manageList(socket);

  manageDatabase(socket);

  console.log('socket.io is connected.');
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
